# Get the last boot-up time of the device
$lastBootUpTime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime

# Display the last boot-up time
Write-Output "The device was last restarted on: $lastBootUpTime"

# corrupt system file script
    Start-Process PowerShell -ArgumentList "Write-Host '(1/4) Chkdsk' -ForegroundColor Green; Chkdsk /scan;
   Write-Host '`n(2/4) SFC - 1st scan' -ForegroundColor Green; sfc /scannow;
   Write-Host '`n(3/4) DISM' -ForegroundColor Green; DISM /Online /Cleanup-Image /Restorehealth;
   Write-Host '`n(4/4) SFC - 2nd scan' -ForegroundColor Green; sfc /scannow;
   Read-Host '`nPress Enter to Continue'" -verb runas


# List printers
Get-CimInstance -ClassName Win32_Printer

# Show print queue counts
Get-CimInstance -ClassName Win32_PerfFormattedData_Spooler_PrintQueue |
    Select-Object Name, Jobs, JobErrors, TotalJobsPrinted

# Print queue details
Get-CimInstance -ClassName Win32_PrintJob

# Restart spooler (not cim but valuable)
Restart-Service -Name Spooler

# Print a windows test page on a printer
Get-CimInstance -ClassName Win32_Printer -Filter 'Name="HP LaserJet M604"' |
    Invoke-CimMethod -MethodName PrintTestPage

# Rename a printer
Get-CimInstance -ClassName Win32_Printer -Filter 'Name="HP LaserJet M604"' |
    Invoke-CimMethod -Method RenamePrinter -Arguments @{NewPrinterName = "My new name"}

# Some advanced printer settings
# Get info about the methods and parameters they take.
(Get-CimClass -Namespace root/StandardCimv2 -ClassName MSFT_PrinterConfiguration).CimClassMethods['SetByPrinterName'].Parameters
# Set the parameter. In this case is turning on printer duplexing.
Invoke-CimMethod -Namespace root/StandardCimv2 -ClassName MSFT_PrinterConfiguration -MethodName SetByPrinterName -Arguments @{
    PrinterName   = 'HP LaserJet M604'
    DuplexingMode = [uint32]1
}



#DNS secondary 8.8.8.8 to solve basic DNS issues.
# Requires: Windows 8 / Server 2012 or newer (Get‑/Set‑DnsClientServerAddress)

# 1. Get all adapters that have at least one IPv4 DNS server configured
$adapters = Get-DnsClientServerAddress -AddressFamily IPv4 |
    Where-Object { $_.ServerAddresses.Count -ge 1 }

foreach ($adapter in $adapters) {
    $ifaceIndex = $adapter.InterfaceIndex
    $alias      = $adapter.InterfaceAlias
    $servers    = $adapter.ServerAddresses

    # Current primary DNS
    $primary = $servers[0]

    # Check if secondary is already 8.8.8.8
    if ($servers.Count -ge 2 -and $servers[1] -eq '8.8.8.8') {
        Write-Host "[$alias] Already has secondary DNS 8.8.8.8 — skipping"
    }
    else {
        Write-Host "[$alias] Setting secondary DNS to 8.8.8.8 (primary remains $primary)"
        # Re‑apply both addresses: primary stays the same, secondary becomes 8.8.8.8
        Set-DnsClientServerAddress `
            -InterfaceIndex $ifaceIndex `
            -ServerAddresses @($primary,'8.8.8.8')
    }
}

Write-Host "Done."

#Change local account password
net user "username" password
