# Get the last boot-up time of the device
$lastBootUpTime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime

# Display the last boot-up time
Write-Output "The device was last restarted on: $lastBootUpTime"

# corrupt system file script
    Start-Process PowerShell -ArgumentList "Write-Host '(1/4) Chkdsk' -ForegroundColor Green; Chkdsk /scan;
   Write-Host '`n(2/4) SFC - 1st scan' -ForegroundColor Green; sfc /scannow;
   Write-Host '`n(3/4) DISM' -ForegroundColor Green; DISM /Online /Cleanup-Image /Restorehealth;
   Write-Host '`n(4/4) SFC - 2nd scan' -ForegroundColor Green; sfc /scannow;
   Read-Host '`nPress Enter to Continue'" -verb runas

# Reset a domain joined user through a scrennconnect prompt without having to log into the server at all.
powershell -NoLogo -NoProfile -ExecutionPolicy Bypass -Command "& {Import-Module ActiveDirectory; $user='changeme'; $pass=ConvertTo-SecureString 'Pashtun123456789!!!!' -AsPlainText -Force; Set-ADAccountPassword -Identity $user -NewPassword $pass -Reset; Set-ADUser -Identity $user -ChangePasswordAtLogon $false; Write-Host ('Password for ' + $user + ' has been reset without requiring change at next logon.');}"

#Unlock/enable a domain joined profile
powershell -NoLogo -NoProfile -ExecutionPolicy Bypass -Command "& {Import-Module ActiveDirectory; $user='changeme'; Unlock-ADAccount -Identity $user -ErrorAction SilentlyContinue; Enable-ADAccount -Identity $user -ErrorAction SilentlyContinue; Write-Host ('User account ' + $user + ' has been unlocked.');}"

# List printers
Get-CimInstance -ClassName Win32_Printer

# Show print queue counts
Get-CimInstance -ClassName Win32_PerfFormattedData_Spooler_PrintQueue |
    Select-Object Name, Jobs, JobErrors, TotalJobsPrinted

# Print queue details
Get-CimInstance -ClassName Win32_PrintJob

# Restart spooler (not cim but valuable)
Restart-Service -Name Spooler

# Print a windows test page on a printer
Get-CimInstance -ClassName Win32_Printer -Filter 'Name="HP LaserJet M604"' |
    Invoke-CimMethod -MethodName PrintTestPage

# Rename a printer
Get-CimInstance -ClassName Win32_Printer -Filter 'Name="HP LaserJet M604"' |
    Invoke-CimMethod -Method RenamePrinter -Arguments @{NewPrinterName = "My new name"}

# Some advanced printer settings
# Get info about the methods and parameters they take.
(Get-CimClass -Namespace root/StandardCimv2 -ClassName MSFT_PrinterConfiguration).CimClassMethods['SetByPrinterName'].Parameters
# Set the parameter. In this case is turning on printer duplexing.
Invoke-CimMethod -Namespace root/StandardCimv2 -ClassName MSFT_PrinterConfiguration -MethodName SetByPrinterName -Arguments @{
    PrinterName   = 'HP LaserJet M604'
    DuplexingMode = [uint32]1
}



#DNS secondary 8.8.8.8 to solve basic DNS issues.
# Requires: Windows 8 / Server 2012 or newer (Get‑/Set‑DnsClientServerAddress)

# 1. Get all adapters that have at least one IPv4 DNS server configured
$adapters = Get-DnsClientServerAddress -AddressFamily IPv4 |
    Where-Object { $_.ServerAddresses.Count -ge 1 }

foreach ($adapter in $adapters) {
    $ifaceIndex = $adapter.InterfaceIndex
    $alias      = $adapter.InterfaceAlias
    $servers    = $adapter.ServerAddresses

    # Current primary DNS
    $primary = $servers[0]

    # Check if secondary is already 8.8.8.8
    if ($servers.Count -ge 2 -and $servers[1] -eq '8.8.8.8') {
        Write-Host "[$alias] Already has secondary DNS 8.8.8.8 — skipping"
    }
    else {
        Write-Host "[$alias] Setting secondary DNS to 8.8.8.8 (primary remains $primary)"
        # Re‑apply both addresses: primary stays the same, secondary becomes 8.8.8.8
        Set-DnsClientServerAddress `
            -InterfaceIndex $ifaceIndex `
            -ServerAddresses @($primary,'8.8.8.8')
    }
}

Write-Host "Done."

#Change local account password
net user "username" password


## Download Winget 
$progressPreference = 'silentlyContinue'
Write-Host "Installing WinGet PowerShell module from PSGallery..."
Install-PackageProvider -Name NuGet -Force | Out-Null
Install-Module -Name Microsoft.WinGet.Client -Force -Repository PSGallery | Out-Null
Write-Host "Using Repair-WinGetPackageManager cmdlet to bootstrap WinGet..."
Repair-WinGetPackageManager -AllUsers
Write-Host "Done."


#Unintstall application adust the $app variable with what you want to unintstall
$app = "Xactimate"

# Search uninstall registry keys (both 64-bit and 32-bit paths)
$uninstallKey = @(
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

# Get all matching programs
$programs = Get-ItemProperty $uninstallKey | Where-Object { $_.DisplayName -like "*$app*" }

if ($programs) {
    foreach ($program in $programs) {
        Write-Host "Found $($program.DisplayName). Uninstalling..."
        
        # Extract uninstall string and clean it up
        $uninstallCmd = $program.UninstallString

        if ($uninstallCmd) {
            # If it's wrapped in quotes and contains arguments, split it
            if ($uninstallCmd -match '^(\"?.+?\.exe\"?)\s*(.*)$') {
                $exe = $matches[1]
                $args = $matches[2]

                # Append silent switches if it's MSI
                if ($exe -like "*msiexec*") {
                    $args = "$args /qn /norestart"
                }

                Start-Process -FilePath $exe -ArgumentList $args -Wait
            } else {
                Write-Host "Uninstall string format not recognized: $uninstallCmd"
            }
        } else {
            Write-Host "No uninstall string found for $($program.DisplayName)."
        }
    }
} else {
    Write-Host "Program $app not found in uninstall registry."
}

